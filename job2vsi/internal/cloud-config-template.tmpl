#cloud-config
# cloud-config must be the 1st line for user-data

# run commands
# default: none
# runcmd contains a list of either lists or a string
# each item will be executed in order at rc.local like level with
# output to the console
# - runcmd only runs during the first boot
# - if the item is a list, the items will be properly executed as if
#   passed to execve(3) (with the first arg as the command).
# - if the item is a string, it will be simply written to the file and
#   will be interpreted by 'sh'
#
# Note, that the list has to be proper yaml, so you have to quote
# any characters yaml would eat (':' can be problematic)
write_files:
  - content: |
      {{range $key, $val := .ENV_VARS}}export {{$key}}='{{$val}}'
      {{end}}
      export INSTANCE_STORAGE_MOUNT_PATH={{.INSTANCE_STORAGE_MOUNT_PATH}}
    owner: root:root
    path: /etc/batch_env_variables
    permissions: "0644"
  - content: |
      {{range $key, $val := .ENV_VARS}}{{$key}}='{{$val}}'
      {{end}}
      INSTANCE_STORAGE_MOUNT_PATH={{.INSTANCE_STORAGE_MOUNT_PATH}}
    owner: root:root
    path: /etc/job_env_vars
    permissions: "0644"

  - content: |
      #!/usr/bin/env bash
      set -e
      set -o pipefail
      source /etc/batch_env_variables
      {{range .CUSTOMER_COMMANDS}}{{.}}
      {{end}}
      touch /run/.success
    owner: root:root
    path: /run/run_workload.sh
    permissions: "0755"
  
  - content: |
      #!/usr/bin/env bash
      sleep 20

      if test -f "/run/.success"; then
        # this line is important, otherwise the if block will be empty in case shut down is disabled and the script will fail 
        echo ".success file present, will shutdown if shutdown config is enabled" 
        {{.SHUT_DOWN}}
      else 
        dist=`grep DISTRIB_ID /etc/*-release | awk -F '=' '{print $2}'`
        if [ "$dist" == "Ubuntu" ]; then
          echo mem > /sys/power/state
        else
          systemctl suspend
        fi  
      fi
    owner: root:root
    path: /run/complete_workload.sh
    permissions: "0755"
  
  - content: |
      name=instance-storage
      log_file=$name.$(date +%Y%m%d_%H%M%S).log
      exec 3>&1 1>>$log_file 2>&1

      function log_info {
          printf "\e[1;34m$(date '+%Y-%m-%d %T') %s\e[0m\n" "$@" 1>&3
      }

      function log_success {
          printf "\e[1;32m$(date '+%Y-%m-%d %T') %s\e[0m\n" "$@" 1>&3
      }

      function log_warning {
          printf "\e[1;33m$(date '+%Y-%m-%d %T') %s\e[0m\n" "$@" 1>&3
      }

      function log_error {
          printf >&2 "\e[1;31m$(date '+%Y-%m-%d %T') %s\e[0m\n" "$@" 1>&3
      }

      # Finds Instance Storage disks that are not formatted and returns a list, i.e.L /dev/vdb, /dev/vdc, etc...
      disks=$(for disk in $(lsblk -p -o NAME,TYPE,PHY-SEC,LOG-SEC,MOUNTPOINT | grep disk | grep 4096 | awk 'NR>0{print $1}');\
      do file -s $disk | grep "$disk: data" | awk 'NR==1{print $1}' | sed 's/:$//'; done)

      # Initializing a counter used in scheme for naming mount points
      disk_counter=0

      for config_disk in $disks; do
          log_info "Running format on each identified disk: mkfs.ext4 -F $config_disk"
          mkfs.ext4 -F $config_disk

          mount_point=$INSTANCE_STORAGE_MOUNT_PATH$disk_counter

          log_info "Creating directory for mount point if required: mkdir $mount_point"
          mkdir -p $mount_point

          log_info "Updating /etc/fstab for automatic mounting of file system on reboot, using block ID for disk"
          sed -i.bak "\@$mount_point @d" /etc/fstab
          echo UUID=`blkid -s UUID -o value $config_disk` $mount_point ext4 defaults,nofail 0 0 | tee -a /etc/fstab

          log_info "Updating systemd with latest configuration"
          systemctl daemon-reload

          log_info "Running mount -a"
          mount -a
          [ $? -ne 0 ] && log_error "Failed mounting of new partition, review log file $log_file." && return 1

          chmod a+w $mount_point

          log_info "Updating counter for next disk/mount point"
          disk_counter=$((disk_counter+1))
      done
    owner: root:root
    path: /run/mount_instance_storage.sh
    permissions: "0755"

runcmd:
  - source /etc/batch_env_variables
  - bash /run/mount_instance_storage.sh
  - bash /run/run_workload.sh
  - bash /run/complete_workload.sh
