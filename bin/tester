#!/bin/bash

# Envs that can be set in the batch job:
#
# The following are required (set them in a secret for security)
# APIKEY          - used to log into IBM Cloud
# COS_CRN         - CRN of COS instance to use when storing the output/log file
# COS_URL         - External URL to COS bucket
# GROUP           - IBM Cloud resource group, using during IBM Cloud login
# SLACK_URL...    - a Slack URL to post the results to (one env var per URL)
#
# Optional:
# PROJECT         - CE project name to use (for new or existing project)
# TEST_SKIP       - spaced list of tests (dirs) to skip
# REGISTRY_APIKEY - Set this if you want it to re-build the images
# REGISTRY        - Registry to use when building (default: icr.io/codeengine)
# REPORT          - Send slack msg even if everything worked (any value)

# Set up batch job:
# ibmcloud ce secret create -n keys ...above keys...
# ibmcloud ce job create -n github --image ibmcomtest/ce-tester \
#   -e REPORT=true --env-from-secret=keys -r 0
# ibmcloud ce sub cron create -n github -s "0 * * * *" -d github --dt=job

echo "====================================================================="

PROJECT=${PROJECT:-testing}

rm -f out tester.out

(
set -ex

env | sort | \
  sed "s/APIKEY=.*/APIKEY=.../" | \
  sed "s/\(SLACK_URL.*\)=.*/\1=.../" | \
  tee tester.out

git clone https://github.com/IBM/CodeEngine.git
cd CodeEngine

ibmcloud update -f
ibmcloud plugin install event-streams
ibmcloud plugin update --all -f

env | awk -F= '/^APIKEY=/{ print $2 }' > .key
ibmcloud login -r us-south --apikey @.key -g $GROUP
rm .key

if ! ibmcloud ce project get -n $PROJECT > /dev/null 2>&1 ; then
  export NEW_PROJECT=1
fi
echo "NEW_PROJECT: $NEW_PROJECT"

trap clean EXIT
function clean {
  rc=$?
  set +e
  if [[ -n "$NEW_PROJECT" ]] ; then
    ibmcloud ce project delete -n $PROJECT -f --hard --wait
  else
    echo "Skipping deletion of project"
  fi

  { date ; echo ; }

  return $rc
}

{
  date ; echo
  set +e
  if [[ -n "$NEW_PROJECT" ]] ; then
    ibmcloud ce project delete -n $PROJECT -f --hard --wait > /dev/null 2>&1
    echo fyi rc: $?
  fi
  set -e
  if [[ -n "$NEW_PROJECT" ]] ; then
    date ; echo
    ibmcloud ce project create -n $PROJECT
    date
  else
    echo "Using existing project: $PROJECT"
    ibmcloud ce project select -n $PROJECT
  fi
  echo
} 2>&1 | tee ../tester.out
[[ ${PIPESTATUS[0]} != "0" ]] && exit 1

if [[ -v REGISTRY_APIKEY ]]; then
  export REGISTRY=${REGISTRY:-icr.io/codeengine}
  bin/build-all
fi

bin/run-all
) 2>&1 | tee tests.out
rc=${PIPESTATUS[0]}

# Delete all pending reclamations, just to clean-up
ibmcloud resource reclamations | grep SCHEDULED | while read id rest
do
  ibmcloud resource reclamation-delete $id --force
done

set -ex

name=$(TZ=America/New_York date "+%F-%T").txt
COS_URL=${COS_URL}/${name}

LINKS=": <$COS_URL|Logs>"
FAILS=$(grep FAIL: tests.out) || true
[[ -n $FAILS ]] && FAILS=" \`\`\`$FAILS\`\`\`"

# Save the output from all tests
[[ -e CodeEngine/run-all.out ]] && cat CodeEngine/run-all.out >> tester.out
(echo ; echo -e "###### tests.out #####\n" && cat tests.out) >> tester.out

ibmcloud cos config crn --crn "$COS_CRN" --force
ibmcloud cos config auth --method IAM
ibmcloud cos object-put --bucket github-logs --key ${name} --body tester.out

if [[ $rc != "0" ]]; then
  TITLE="Github samples FAILED"
else
  TITLE="Github samples PASSED"
fi

SUMMARY=$(echo "$TITLE$LINKS$FAILS" | jq -asR .)

cat <<EOF >msg
{
  "text": "$TITLE",
  "blocks":[
    { "type": "section",
      "text": {
        "type": "mrkdwn",
        "text": $SUMMARY
      }
    }
  ]
}
EOF

# Report our status to all SLACK_URL env vars we have
[[ -n $REPORT || $rc != "0" ]] && (
  set +x
  env | grep SLACK_URL | while read URL ; do
    echo URL: $URL
    [[ -n ${URL##*=} ]] && curl -w "%{http_code}\n" -fs ${URL##*=} --data @msg
  done
  set -x
)

rm -f msg tests.out tester.out

exit $rc
