#!/bin/bash

# This will run (w/o building) all demos in parallel
MAX=${MAX:-8}
declare -A dirs

cd $(dirname $0)/..

echo "Cleaning..."
bin/clean > /dev/null 2>&1

rm -f .dep-* .cos-seen
rm -f run-all.out run-fail.out *.fail *.out

echo TEST_SKIP=$TEST_SKIP
for file in */run ; do
  dir=`dirname $file`
  # Skip this dir 'cause we're asked or if it's to be run sequentially
  [[ -e ${dir}/.SKIP ]] && echo "Skipping $dir " && continue
  [[ "$TEST_SKIP" == *"$dir"* ]] && echo "Skipping $dir " && continue
  dirs[$dir]='yes'
done

set -e
(time (
  while [[ ${#dirs[@]} != "0" ]]; do
    # Only allow $MAX at a time
    while (( $(jobs -rp | wc -l) >= $MAX )); do
      sleep 1
    done

    for dir in ${!dirs[@]}; do
      if [[ -f $dir/.DEPS ]]; then
        ok="yes"
        for check in $(cat $dir/.DEPS); do
          [[ -f ".dep-$check" ]] && ok="no" && break
        done
        [[ $ok == "no" ]] && continue

        for check in $(cat $dir/.DEPS); do
          touch ".dep-$check"
		  # Pause to let COS clean-up from previous usage
		  [[ "$check" == "cos" ]] && [[ -f .cos-seen ]] && sleep 180
		  [[ "$check" == "cos" ]] && touch .cos-seen
        done
      fi

      echo "$(date "+%X") Running $dir"
      unset dirs[$dir]
      (
        cd $dir
        if timeout 30m ./run "$@" > ../${dir}.out 2>&1 ; then
          echo "$(date "+%X") PASS: $dir"
        else
          echo "$(date "+%X") FAIL: $dir (${dir}.out)"
          echo FAIL > ../${dir}.fail
          [[ -n $INLINE ]] && tail ../${dir}.out
        fi
        ./run clean > /dev/null 2>&1

		if [[ -f .DEPS ]]; then
          for check in $(cat .DEPS); do
            rm -f "../.dep-$check"
          done
		fi
      ) &
      break
    done

    # if (( $(jobs -rp | wc -l) < $MAX )) && [[ ${#dirs[@]} != "0" ]] ; then
      # sleep 5
    # fi
  done
  wait
  rm .cos-seen
)) 2>&1 | tee run-all.out

pass="true"

for file in */run ; do
    dir=`dirname $file`

    if [[ -e ${dir}.fail ]]; then
	  pass="false"
	  break
	fi
done

if [[ $pass == "true" ]]; then
  echo -e "\nPASSED"
  for file in */run ; do
    dir=`dirname $file`
    if [[ ! -e ${dir}.fail ]]; then
      echo -e "\n### $dir\n" >> run-all-pass.out
      [[ -e ${dir}.out ]] && cat ${dir}.out >> run-all-pass.out
	fi
  done
else
  echo -e "\n### Failing tests:"
  for file in */run ; do
    dir=`dirname $file`
    if [[ -e ${dir}.fail ]]; then
	  echo -e "> ${dir}"

      echo -e "\n### $dir\n" >> run-all-fail.out
      cat ${dir}.out >> run-all-fail.out
	else
      echo -e "\n### $dir\n" >> run-all-pass.out
      [[ -e ${dir}.out ]] && cat ${dir}.out >> run-all-pass.out
	fi
  done
  echo -e "\nFAILED!"
fi | tee -a run-all.out

# Don't put these in the previous section since I don't want it all
# going to stdout
(
echo -e "\n##### FAILURES #########"
[[ -e run-all-fail.out ]] && cat run-all-fail.out

echo -e "\n\n##### PASSING  #########"
cat run-all-pass.out
) >> run-all.out

for file in */run ; do
    dir=`dirname $file`

    if [[ -e ${dir}.fail ]]; then
      rm ${dir}.fail
      echo -e "\n### $dir\n" >> run-fail.out
      tail -50 ${dir}.out >> run-fail.out
    fi
done

[[ $pass == "false" ]] && exit 1
exit 0
